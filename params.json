{"name":"Watchable","body":"This is code I've had floating around for a few years now, but I've\r\nalso incorporated a few extras from node.js' [EventEmitter][ee],\r\n[jQuery][jq], and [Backbone.Events][be].\r\n\r\n[ee]: http://nodejs.org/api/events.html#events_class_events_eventemitter\r\n[jq]: http://api.jquery.com/on\r\n[be]: http://documentcloud.github.com/backbone/#Events\r\n\r\n### Examples\r\n\r\n#### Fixtures\r\n\r\n```ruby\r\nrequire \"watchable\"\r\n\r\nclass Frob\r\n  include Watchable\r\nend\r\n\r\nclass Callable\r\n  def call *args\r\n    p :called! => args\r\n  end\r\nend\r\n```\r\n\r\n#### Watching and Firing\r\n\r\nEvents can have any number of watchers. Each watcher will be called\r\nin order, and any args provided when the event is fired will be passed\r\nalong. Watchers will most commonly be blocks, but any object that\r\nresponds to `call` can be used instead.\r\n\r\n```ruby\r\nfrob = Frob.new\r\n\r\nfrob.on :twiddle do |name|\r\n  puts \"#{name} twiddled the frob!\"\r\nend\r\n\r\nfrob.on :twiddle do |name|\r\n  puts \"(not that there's anything wrong with that)\"\r\nend\r\n\r\nfrob.on :twiddle, Callable.new\r\nfrob.fire :twiddle, \"John\"\r\n```\r\n\r\n##### Result\r\n\r\n    John twiddled the frob!\r\n    (not that there's anything wrong with that)\r\n    { :called! => [\"John\"] }\r\n\r\n#### Watching Everything\r\n\r\nWant to see every event? Register for `:all`. The first argument will\r\nbe the name of the fired event.\r\n\r\n```ruby\r\nfrob = Frob.new\r\n\r\nfrob.on :all do |event, culprit|\r\n  p :fired => [event, culprit]\r\nend\r\n\r\nfrob.fire :foo, \"John\"\r\n```\r\n\r\n##### Result\r\n\r\n    {:fired => [:foo, \"John\"]}\r\n\r\n#### Watching Once\r\n\r\nOnly want to be notified the first time something happens? `once` is\r\nlike `on`, but fickle.\r\n\r\n```ruby\r\nfrob = Frob.new\r\n\r\nfrob.once :twiddle do\r\n  p :twiddled!\r\nend\r\n\r\nfrob.fire :twiddle\r\nfrob.fire :twiddle\r\n```\r\n\r\n##### Result\r\n\r\n    :twiddled!\r\n\r\n#### Unwatching\r\n\r\nSpecific blocks or callable objects can be removed from an event's\r\nwatchers, or all the event's watchers can be removed.\r\n\r\n```ruby\r\nb    = lambda {}\r\nfrob = Frob.new\r\n\r\nfrob.on :twiddle, &b\r\n\r\nfrob.off :twiddle, b  # removes the 'b' watcher, same as frob.off :twiddle, &b\r\nfrob.off :twiddle     # removes all watchers for the 'twiddle' event\r\n```","tagline":"A simple event/notification mixin for Ruby.","google":""}